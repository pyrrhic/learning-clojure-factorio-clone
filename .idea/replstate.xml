<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1469760889537">{:repl-history {:ide [], :local [&quot;(+ 1 1)&quot; &quot;(select [(keypath \&quot;a\&quot;) (keypath \&quot;b\&quot;)]\n        {\&quot;a\&quot; {\&quot;b\&quot; 10}})&quot; &quot;(doc dotimes)&quot; &quot;((dotimes [_ 10]\n   (time\n     (dotimes [_ 10000]\n       (+ 1 1)\n       ))))&quot; &quot;(time\n     (dotimes [_ 10000]\n       (+ 1 1)\n       ))&quot; &quot;(use 'com.rpl.specter)&quot; &quot;(use 'com.rpl.specter.macros)&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (compiled-select (comp-paths :a :b :c) {:a {:b {:c 1}}})))&quot; &quot;(def p (comp-paths :a :b :c))&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (compiled-select p {:a {:b {:c 1}}})))&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (get-in {:a {:b {:c 1}}} [:a :b :c])))&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (select [:a :b :c] {:a {:b {:c 1}}})))&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (update-in {:a {:b {:c 1}}} [:a :b :c] inc)))&quot; &quot;(time\n  (dotimes [_ 10000000]\n    (transform [:a :b :c] inc {:a {:b {:c 1}}})))&quot; &quot;(Testing. )&quot; &quot;(ns trying-things.main-screen)&quot; &quot;(source doto)&quot; &quot;(defn init-game []\n  (-&gt; (assoc {}\n        :batch (SpriteBatch.)\n        :stage (let [btnAtlas (TextureAtlas. \&quot;uiskin.atlas\&quot;)\n                     btnSkin (doto (Skin.)\n                               (.addRegions btnAtlas))\n                     font (BitmapFont. Gdx/files)\n                     ])\n        :tex-cache nil\n        :inputs {})))&quot; &quot;(use 'clojure.repl)&quot; &quot;(source filter)&quot; &quot;(assoc {} #{})&quot; &quot;([1] 0)&quot; &quot;(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)])&quot; &quot;(proja.desktop-launcher/run-on-main-thread #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]))&quot; &quot;(proja.desktop-launcher/run-on-main-thread \n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]\n    (println atlas)))&quot; &quot;(proja.desktop-launcher/run-on-main-thread \n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]\n    (println (aget (.getRegions atlas) 0))\n    ))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]\n    (println (.getRegions atlas))\n    ))&quot; &quot;(proja.desktop-launcher/run-on-main-thread \n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]\n    (println (.get (.getRegions atlas) 0))\n    ))&quot; &quot;(proja.desktop-launcher/run-on-main-thread \n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)]\n    (-&gt; (.getRegions atlas) \n        (.get 0) \n        (.-name)\n        (println))\n    ))&quot; &quot;(pos? 0)&quot; &quot;(keyword \&quot;hu\&quot;)&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (.-size regions)\n           tex-cache {}]\n      (if (neg? idx)\n        tex-cache\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (.-size regions)\n           tex-cache {}]\n      (if (&lt; idx 1)\n        tex-cache\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (.-size regions)\n           tex-cache {}]\n      (if (&gt; idx 0)\n        tex-cache\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (.-size regions)\n           tex-cache {}]\n      (if (&gt; idx 0)\n        (println tex-cache)\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (.-size regions)\n           tex-cache {}]\n      (if (&gt; idx 0)\n        (println (.-size regions))\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (dec (.-size regions))\n           tex-cache {}]\n      (if (neg? idx)\n        tex-cache\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(proja.desktop-launcher/run-on-main-thread\n  #(let [atlas (TextureAtlas. \&quot;s.pack\&quot;)\n         regions (.getRegions atlas)]\n    (loop [idx (dec (.-size regions))\n           tex-cache {}]\n      (if (neg? idx)\n        (println tex-cache)\n        (recur (dec idx)\n               (let [v (.get regions idx)\n                     k (keyword (.-name v))]\n                 (assoc tex-cache k v)))))))&quot; &quot;(:inputs game)&quot; &quot;(.translate (:camera game) 100 0)&quot; &quot;(.update (:camera game))&quot; &quot;(.-position (:camera game))&quot; &quot;(let [stage (Stage. (ScreenViewport.))\n      skin (Skin. (.internal Gdx/files \&quot;uiskin.json\&quot;))\n      dialog (Dialog. \&quot;Click Message\&quot; skin)\n      button (doto (TextButton. \&quot;Click me\&quot; skin \&quot;default\&quot;)\n               (.setWidth 200)\n               (.setHeight 50)\n               (.addListener (proxy [ClickListener] []\n                               (clicked [e x y]\n                                 (.show dialog stage)\n                                 (Timer/schedule (proxy [Timer$Task] []\n                                                   (run [] (.hide dialog)))\n                                                 2)))))]\n  (.addActor stage button)\n  (.setInputProcessor Gdx/input stage)\n  stage)&quot; &quot;(cast Object 1)&quot; &quot;(type (cast Object 1))&quot; &quot;(seq [1 2 3])&quot; &quot;(into-array (seq [1 2 3]))&quot; &quot;(into-array (seq [1 2 \&quot;a\&quot;]))&quot; &quot;(:stage game)&quot; &quot;(:skin game)&quot; &quot;(texture-atlas\n  \n  )&quot; &quot;(keys game)&quot; &quot;(:camera game)&quot; &quot;(:tex-cache game)&quot; &quot;(defn ui [])&quot; &quot;(defn ui []\n  (let [stage (:stage game)\n        table (Table.)\n        ])\n  )&quot; &quot;(import ('com.badlogic.gdx.scenes.scene2d.ui Skin TextButton Dialog Table))&quot; &quot;(import ('com.badlogic.gdx.scenes.scene2d.ui Table))&quot; &quot;(import 'com.badlogic.gdx.scenes.scene2d.ui Table)&quot; &quot;(import com.badlogic.gdx.scenes.scene2d.ui.Table)&quot; &quot;(defn input-processor []\n  (reify InputProcessor\n    (touchDown [this x y pointer button] false)\n    (keyDown [this keycode]\n      (alter-var-root (var game) #(assoc-in % [:inputs (keyword (Input$Keys/toString keycode))] true))\n      true)\n    (keyUp [this keycode]\n      (alter-var-root (var game) #(assoc-in % [:inputs (keyword (Input$Keys/toString keycode))] false))\n      true)\n    (keyTyped [this character] false)\n    (touchUp [this x y pointer button]\n      (alter-var-root (var game) #(assoc-in % [:inputs :mouse-x] x))\n      (alter-var-root (var game) #(assoc-in % [:inputs :mouse-y] (- 600 y)))\n      false)\n    (touchDragged [this x y pointer] false)\n    (mouseMoved [this x y] false)\n    (scrolled [this amount] false)))&quot; &quot;(or 1 3)&quot; &quot;(let [stage (:stage game)\n        table (doto (Table.)\n                (.setWidth table (.getWidth stage))\n                (.align table 1)                            ;use Align class. 1 is center.\n                (.debug table)\n                (.setPosition 0 (.getHeight Gdx/graphics))\n                )])\n&quot; &quot;(let [stage (:stage game)\n        table (doto (Table.)\n                (.setWidth (.getWidth stage))\n                (.align 1)                            ;use Align class. 1 is center.\n                (.debug)\n                (.setPosition 0 (.getHeight Gdx/graphics))\n                )])\n&quot; &quot;(let [stage (:stage game)\n      table (doto (Table.)\n              (.setWidth (.getWidth stage))\n              (.align 1)                            ;use Align class. 1 is center.\n              (.debug)\n              (.setPosition 0 (.getHeight Gdx/graphics)))]\n  (.addActor stage table))\n&quot; &quot;(-&gt; (:stage game) (.getActors))&quot; &quot;(-&gt; (:stage game) (.getActors) (.get 0))&quot; &quot;(-&gt; (:stage game) (.getActors) (.get 0) (.debugActor))&quot; &quot;(-&gt; (:stage game) (.getActors) (.get 0) (.debugTable))&quot; &quot;(-&gt; (:stage game) (.debugAll))&quot; &quot;(let [button (TextButton. \&quot;Build\&quot; skin)\n      table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.add button)\n  ) &quot; &quot;(let [button (TextButton. \&quot;Build\&quot; (-&gt; game :tex-cache :skin))\n      table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.add button)\n  ) &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (.getHeight Gdx/graphics)+10))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (+ 100 (.getHeight Gdx/graphics))))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (- 100 (.getHeight Gdx/graphics))))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (.getHeight Gdx/graphics)))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (- (.getHeight Gdx/graphics) 100)))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 (- (.getHeight Gdx/graphics) 200)))&quot; &quot;(let [button (TextButton. \&quot;Build\&quot; (-&gt; game :tex-cache :skin))\n      table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.add table button)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setHeight table 100))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setPosition table 0 0))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.setFillParent table true))&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.row table)\n  (Label. \&quot;Hello there\&quot; (:skin game))\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.row table)\n  (Label. \&quot;Hello there\&quot; (:skin (:tex-cache game)))\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.add table (Label. \&quot;Name:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) 100))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  \n  (.clear table))\n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.add table (Label. \&quot;Name:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100)))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.add table (Label. \&quot;Name:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100))\n  (.row table)\n  (.add table (Label. \&quot;Address:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100))\n  )\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.left table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.clear table))\n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (-&gt; (Label. \&quot;Name:\&quot; skin) (.add table ) (.expandX)) \n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100))\n  (.row table)\n  (.add table (Label. \&quot;Address:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100)))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (-&gt; (Label. \&quot;Name:\&quot; skin) (.add table )) \n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100))\n  (.row table)\n  (.add table (Label. \&quot;Address:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100)))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  (.reset table))\n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (-&gt;&gt; (Label. \&quot;Name:\&quot; skin) (.add table )) \n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100))\n  (.row table)\n  (.add table (Label. \&quot;Address:\&quot; skin))\n  (.width (.add table (TextField. \&quot;\&quot; skin)) (float 100)))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.bottom table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.invalidate table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.debug table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)]\n  (.clear table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      skin (-&gt; game :tex-cache :skin)\n      potato-btn (TextButton. \&quot;Potato Farm\&quot; skin)\n      potato-l (proxy [ClickListener] []\n                 (clicked [event x y]\n                   (println \&quot;potato farm!!\&quot;)))]\n  (.bottom table)\n  (.addListener potato-btn potato-l)\n  (.add table potato-btn)\n  )\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  )\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))]\n  table)\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) )]\n  table)\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 1))]\n  table)\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells))]\n  btn)\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0))]\n  (.setDisabled btn true))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  btn)\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setDisabled btn true))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setDisabled btn true)\n  (.invalidate table))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setDisabled btn true)\n  (.isDisabled btn))\n  \n  &quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  ;(.setDisabled btn true)\n  (.isDisabled btn))\n  \n  &quot; &quot;(ui)&quot; &quot;(defn ui []\n  (let [stage (:stage game)\n        table (doto (Table.)\n                (.setWidth (.getWidth stage))\n                (.align 1)                            ;use Align class. 1 is center.\n                (.debug)\n                (.setPosition 0 0))]\n    (.addActor stage table))\n  (let [table (-&gt; (:stage game) (.getActors) (.get 0))\n        skin (-&gt; game :tex-cache :skin)\n        potato-btn (TextButton. \&quot;Potato Farm\&quot; skin)\n        potato-l (proxy [ClickListener] []\n                   (clicked [event x y]\n                     (println \&quot;potato farm!!\&quot;)))]\n    (.bottom table)\n    (.addListener potato-btn potato-l)\n    (.add table potato-btn)\n    (.setDisabled potato-btn true)\n    )\n  (let [table (-&gt; (:stage game) (.getActors) (.get 0))\n        btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n\n    ;(.isDisabled btn)\n    )\n  )&quot; &quot;(defn game-loop [game]\n  (def second-counter (+ second-counter (:delta game)))\n  (def fps (inc fps))\n  (when (&gt;= second-counter 1.0)\n    (do\n      (def second-counter 0.0)\n      (def last-fps fps)\n      (def fps 0)\n      (when (&lt; last-fps 60)\n        (println \&quot;frame rate is dropping below 60 : \&quot; last-fps \&quot; @ \&quot; (new java.util.Date)))))\n\n  (if (:paused game)\n    game\n    ;(assoc-in game [:ecs :entities] (sys/render game))\n    (do (clear-screen)\n        (tmap/draw-grid (:tile-map game) (:batch game))\n        (move-camera game)\n        (.setProjectionMatrix (:batch game) (.combined (:camera game)))\n        (.update (:camera game))\n        (.act (:stage game) (.getDeltaTime Gdx/graphics))\n        (.draw (:stage game))))\n  game\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n\n  (.setTouchable btn false)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  btn\n  ;(.setTouchable btn Touchable/disabled)\n  )&quot; &quot;(ns proja.screens.main-screen)&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setTouchable btn Touchable/disabled)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setTouchable btn Touchable/enabled)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n  (.setDisabled potato-btn false)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n\n  (.setDisabled btn true)\n  )&quot; &quot;(let [table (-&gt; (:stage game) (.getActors) (.get 0))\n      btn (-&gt; table (.getCells) (.get 0) (.getActor))]\n\n  (.setDisabled btn false)\n  )&quot;], :remote []}}</component>
</project>